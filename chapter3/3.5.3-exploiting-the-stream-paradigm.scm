(load "3.5.2-infinite-streams.scm")

(define (sqrt-improve guess x)
  (define (average a b) (/ (+ a b) 2))
  (average guess (/ x guess)))

(define (sqrt-stream x)
  (define guesses
    (cons-stream 1.0
                 (stream-map (lambda (guess)
                               (sqrt-improve guess x))
                             guesses)))

  guesses)

; -------------------------------------------------------------------

(load "3.55.scm")

(define (pi-summands n)
  (cons-stream (/ 1.0 n)
               (stream-map - (pi-summands (+ n 2)))))

(define pi-stream
  (scale-stream (partial-sums (pi-summands 1)) 4))

;(display-stream-n pi-stream 10)

; -------------------------------------------------------------------

(define (euler-transform s)
  (define (square x) (* x x))
  (let ((s0 (stream-ref s 0)) ; s_(n-1)
        (s1 (stream-ref s 1)) ; s_n
        (s2 (stream-ref s 2))) ; s_(n+1)
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))

;(display-stream-n (euler-transform pi-stream) 10)

; -------------------------------------------------------------------

(define (make-tableau transform s)
  (cons-stream s (make-tableau transform (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car (make-tableau transform s)))

;(display-stream-n (accelerated-sequence euler-transform pi-stream) 10)

; -------------------------------------------------------------------

(define (interleave s1 s2)
  (if (stream-null? s1)
    s2
    (cons-stream (stream-car s1)
                 (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream (list (stream-car s) (stream-car t))
               (interleave (stream-map (lambda (x)
                                         (list (stream-car s) x))
                                       (stream-cdr t))
                           (pairs (stream-cdr s) (stream-cdr t)))))
